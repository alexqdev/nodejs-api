{"version":3,"sources":["App.js","index.js"],"names":["App","useState","name","post","_id","posts","setPosts","setPost","isPut","setIsPut","isPostUpdate","setIsPostUpdate","id","updatedPost","setUpdatedPost","handleChange","event","target","value","prevInput","handleUpdate","useEffect","fetch","then","res","ok","json","jsonRes","catch","err","console","log","className","onChange","placeholder","onClick","axios","put","setTimeout","window","location","reload","preventDefault","newPost","alert","map","cursor","color","delete","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9350d113.chunk.js","sourcesContent":["// npx install create-react-app myApp\n// npm init \n// npm install express mongoose axios cors bootstrap react-bootstrap-icons uuid\n// package.json => \"proxy\": \"http://localhost:3001\",\n// clear cra defaults\n// make server.js =>\n\n// imports \nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as Icon from 'react-bootstrap-icons';\nimport \"./styles.css\";\n\nfunction App() { \n  // posts state - arr of objs\n  const [posts, setPosts] = useState([\n    {\n      name: \"\",\n      post: \"\",\n      _id: \"\",\n    },\n  ]);\n\n  // post state - obj \n  const [post, setPost] = useState({\n    name: \"\",\n    post: \"\",\n  });\n\n  // is put check state \n  const [isPut, setIsPut] = useState(false);\n\n  // post update btn check state \n  const [isPostUpdate, setIsPostUpdate] = useState(false);\n\n  // updated post state - obj \n  const [updatedPost, setUpdatedPost] = useState({\n    name: \"\",\n    post: \"\",\n    id: \"\",\n  });\n\n  // useEffect to fetch data\n  useEffect(() => {\n    // fetch posts data \n    fetch(\"/posts\")\n      .then((res) => {\n        if (res.ok) {\n          // return posts json\n          return res.json();\n        }\n      })\n      // set posts \n      .then((jsonRes) => setPosts(jsonRes))\n      .catch((err) => console.log(err));\n  }, [posts]);\n\n  // useEffect to render default html \n  useEffect(()=>{\n    setIsPut(false);\n  },[isPostUpdate])\n\n  // track input values\n  function handleChange(event) {\n    const { name, value } = event.target;\n    // set post to tracked input values\n    setPost((prevInput) => {\n      // return previous input + current input\n      return {\n        ...prevInput,\n        [name]: value,\n      };\n    });\n  }\n\n  // add post event \n  function addPost(event) {\n    event.preventDefault();\n    // check inputs != empty\n    if (post.name != \"\" && post.post != \"\") {\n      // build new post w/ ui data\n      const newPost = {\n        name: post.name,\n        post: post.post,\n      };\n      // axios post new post to server route\n      axios.post(\"/newpost\", newPost);\n\n      // clear post \n      setPost({\n        name: \"\",\n        post: \"\",\n      });\n    } else {\n      // alert empty input \n      alert('Inputs cannot be empty.')\n    }\n  }\n\n  // delete post by id event\n  function deletePost(id) {\n    // axios delete route + passed id \n    axios.delete(\"/delete/\" + id);\n  }\n\n  // display update html \n  function openUpdate(id) {\n    // set is put to true to display update html\n    setIsPut(true);\n\n    // set updated post to tracked input values*\n    setUpdatedPost((prevInput) => {\n      return {\n        ...prevInput,\n        id: id,\n      };\n    });\n  }\n\n  // update post event \n  function updatePost(id) {\n    // axios put updated post to server route + passed id\n    axios.put(\"/put/\" + id, updatedPost);\n    setIsPostUpdate(true);\n    setUpdatedPost({\n      name:\"\",\n      post:\"\"\n    })\n    setTimeout(() => {\n      setIsPostUpdate(false);\n    }, 3000);\n  }\n\n  // track input values \n  function handleUpdate(event) {\n    const { name, value } = event.target;\n    // set updated post to tracked input values \n    setUpdatedPost((prevInput) => {\n      // return previous input + current input\n      return {\n        ...prevInput,\n        [name]: value,\n      };\n    });\n  }\n  return (\n    <div className=\"App container\">\n      <div className='container text-center home'>\n        <h3>Create/Retrieve/Update/Delete to/from Database<br /><Icon.ArrowDown /></h3>\n      </div>\n      {!isPut ? (\n        <div className=\"main container\">\n          <input\n            id=\"postName\"\n            onChange={handleChange}\n            name=\"name\"\n            value={post.name}\n            placeholder=\"name\"\n          ></input>\n          <input\n            id=\"postPost\"\n            onChange={handleChange}\n            name=\"post\"\n            value={post.post}\n            placeholder=\"post\"\n          ></input>\n          <button className=\"btn btn-lg btn-info\" onClick={addPost}>\n            ADD POST\n          </button>\n        </div>\n      ) : (\n        <div className=\"main container\">\n          <input\n            id=\"postName\"\n            onChange={handleUpdate}\n            name=\"name\"\n            value={updatedPost.name}\n            placeholder=\"name\"\n          ></input>\n          <input\n            id=\"postPost\"\n            onChange={handleUpdate}\n            name=\"post\"\n            value={updatedPost.post}\n            placeholder=\"post\"\n          ></input>\n          <button className=\"btn btn-lg btn-warning\" onClick={() => updatePost(updatedPost.id)}>\n            UPDATE POST\n          </button>\n          <button className=\"btn btn-lg btn-secondary\" onClick={() => window.location.reload()}>CANCEL</button>\n        </div>\n      )}\n      <div id=\"posts\" className=\"container\">\n        {/* map posts info - build / display HTML */}\n        {posts.map((post) => {\n          return (\n            <div className=\"post container\" key={post._id}>\n              <span className=\"postBtns\">\n                <Icon.Pencil className=\"postBtn\" cursor=\"pointer\" color=\"yellow\" onClick={() => openUpdate(post._id)} />\n                <Icon.Trash className=\"postBtn\" cursor=\"pointer\" color=\"red\" onClick={() => deletePost(post._id)} />\n              </span>\n              <p>{post.name}</p>\n              <p>{post.post}</p>\n            </div>\n          );\n        }).reverse()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}